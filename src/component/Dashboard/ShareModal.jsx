// src/component/Dashboard/ShareModal.jsx
import { useState, useEffect } from "react";
import { X, Copy, Trash2, AlertTriangle, Users, Globe } from "lucide-react";
import api from "../../utils/axiosInstance";
import toast from "react-hot-toast";

export default function ShareModal({ item, isOpen, onClose }) {
    const [link, setLink] = useState(null);
    const [sharedUsers, setSharedUsers] = useState([]);
    const [linkAttempted, setLinkAttempted] = useState(false);

    // Fetch existing share info
    useEffect(() => {
        async function fetchShares() {
            try {
                if (isOpen && item?.id) {
                    console.log("Fetching share info  for an item id:", item.id);

                    // calling api --- shareRouter -- to get share info of a item
                    const res = await api.get(`/shares/${item.id}`);
                    console.log("Response of get req on api that fetch all share info of a item:", res);

                    setLink(res.data.data?.link || null);
                    setSharedUsers(res.data.data?.users || []);
                }
            } catch (err) {
                console.error("Failed to fetch share info:", err);
                if (err.response?.status === 404) {
                    console.log("No shares found for this item, resetting states");
                    setLink(null);
                    setSharedUsers([]);
                } else {
                    toast.error("Failed to load share info.");
                }
            }
        }
        fetchShares();
    }, [isOpen, item]);

    // Public Share 
    async function handleGenerateLink() {
        try {
            console.log("Generating public link for item:", item.id);

            // calling api -- to generate the public link
            const res = await api.post(`/shares/public/${item.id}`);

            console.log("Response of creating public share link:", res);

            const token = res.data.data.token;
            console.log("Generated token:", token);

            // calling api -- to get the singed url from supbase using the token that is generated by this api -- /api/shares/public/:itemId
            const signedRes = await api.get(`/shares/public/${token}`);
            console.log("Response of accessing public link with token:", signedRes);

            const signedUrl = signedRes.data.data.signedUrl;
            console.log("Signed URL received:", signedUrl);

            if (!signedUrl) {
                setLink(null);
                toast.error("Supabase did not generate a link.");
                const err = new Error("Signed URL undefined from Supabase");
                err.status = 200;
                throw err;
            }

            setLink(signedUrl);
            toast.success("Public link generated!");
        } catch (err) {
            console.error("Error in handleGenerateLink:", err);
            setLinkAttempted(true);
            toast.error("Failed to generate public link.");
        }
    }

    function handleCopy() {
        console.log("Copying link to clipboard:", link);
        navigator.clipboard.writeText(link);
        toast.success("Link copied to clipboard!");
    }

    async function handleRemoveLink() {
        try {
            console.log("Removing public link for item:", item.id);

            // calling our api --- deleted - request --- > /api/shares/public/:itemId to remove the public share link
            const res = await api.delete(`/shares/public/${item.id}`);
            console.log("Response of remove link:", res);

            setLink(null);
            setLinkAttempted(false);
            toast.success("Public link removed.");
        } catch (err) {
            console.error("Error removing public link:", err);
            toast.error("Failed to remove public link.");
        }
    }

    // Restricted Share
    async function handleAddUser(email) {
        try {
            console.log("Adding restricted share for email:", email);

            // calling our api for restricted sahre 
            const res = await api.post(`/shares/restricted/${item.id}`, {
                email,
                role: "viewer",
            });
            console.log("Response of adding user:", res);

            setSharedUsers([...sharedUsers, res.data.data]);

            toast.success(`Shared with ${email}`);
        } catch (err) {
            console.error("Error adding user:", err);
            toast.error("Failed to add user.");
        }
    }

    async function handleRemoveUser(userId) {
        try {
            console.log("Removing restricted user with id:", userId);
            const res = await api.delete(`/shares/restricted/${item.id}`, {
                data: { userId },
            });
            console.log("Response of remove user:", res);

            setSharedUsers(sharedUsers.filter((u) => u.id !== userId));
            toast.success("User removed.");
        } catch (err) {
            console.error("Error removing user:", err);
            toast.error("Failed to remove user.");
        }
    }

    if (!isOpen) return null;

    return (
        <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
            <div className="bg-gray-800 rounded-lg p-6 w-[480px] relative">
                {/* Header */}
                <button
                    onClick={onClose}
                    className="absolute top-3 right-3 text-gray-400 hover:text-white"
                >
                    <X size={20} />
                </button>
                <h2 className="text-lg font-semibold mb-4 text-white">
                    Share “{item?.name}”
                </h2>

                {/* Restricted Sharing Section */}
                <div className="mb-8 border-b border-gray-700 pb-6">
                    <h3 className="text-md font-semibold text-white mb-3 flex items-center">
                        <Users size={18} className="mr-2 text-blue-400" />
                        Restricted Sharing
                    </h3>

                    <label className="block text-sm text-gray-300 mb-2">
                        Share with specific people
                    </label>

                    <div className="flex space-x-2">
                        <input
                            type="email"
                            placeholder="Enter email"
                            className="flex-1 px-3 py-2 rounded bg-gray-700 text-white text-sm"
                            id="share-email"
                            onKeyDown={(e) => {
                                if (e.key === "Enter") {
                                    e.preventDefault();
                                    const input = e.target;
                                    if (input.value.trim()) {
                                        handleAddUser(input.value.trim());
                                        input.value = "";
                                    }
                                }
                            }}
                        />
                        <button
                            onClick={() => {
                                const input = document.getElementById("share-email");
                                if (input.value.trim()) {
                                    handleAddUser(input.value.trim());
                                    input.value = "";
                                }
                            }}
                            className="bg-blue-600 px-4 py-2 rounded text-white hover:bg-blue-500 text-sm"
                        >
                            Add
                        </button>
                    </div>

                    <ul className="mt-4 space-y-2 text-sm">
                        {sharedUsers.length > 0 ? (
                            sharedUsers.map((u, i) => (
                                <li
                                    key={i}
                                    className="flex justify-between items-center bg-gray-700 px-3 py-2 rounded"
                                >
                                    <span>{u?.shared_email || "Unknown email"}</span>
                                    <button
                                        onClick={() => handleRemoveUser(u.id)}
                                        className="text-red-400 hover:text-red-200"
                                    >
                                        <Trash2 size={16} />
                                    </button>
                                </li>
                            ))
                        ) : (
                            <li className="text-gray-400 italic">No users have access yet.</li>
                        )}
                    </ul>


                    <p className="text-gray-400 text-xs mt-3">
                        Only added users will be able to access this file (role: viewer by default).
                    </p>
                </div>


                {/* Public Sharing Section */}
                <div>
                    <h3 className="text-md font-semibold text-white mb-3 flex items-center">
                        <Globe size={18} className="mr-2 text-green-400" />
                        Public Sharing
                    </h3>
                    {link ? (
                        <div>
                            <p className="text-gray-400 text-sm mb-2">
                                Anyone with the link can view this item.
                            </p>
                            <div className="flex items-center space-x-2">
                                <input
                                    type="text"
                                    readOnly
                                    value={link}
                                    className="flex-1 px-3 py-2 rounded bg-gray-700 text-white text-sm"
                                />
                                <button
                                    onClick={handleCopy}
                                    className="bg-blue-600 px-3 py-2 rounded text-white hover:bg-blue-500"
                                >
                                    <Copy size={16} />
                                </button>
                                <button
                                    onClick={handleRemoveLink}
                                    className="bg-red-600 px-3 py-2 rounded text-white hover:bg-red-500"
                                >
                                    <Trash2 size={16} />
                                </button>
                            </div>
                            <p className="flex items-center text-yellow-400 text-xs mt-2">
                                <AlertTriangle size={14} className="mr-1" />
                                This link is valid only for the next 1 hour.
                            </p>
                        </div>
                    ) : (
                        <div>
                            <p className="text-gray-400 italic mb-2">
                                No public link generated yet.
                            </p>
                            <button
                                onClick={handleGenerateLink}
                                className="bg-blue-600 px-3 py-2 rounded text-white hover:bg-blue-500"
                            >
                                Generate public link
                            </button>

                            {linkAttempted && !link && (
                                <p className="text-red-400 text-sm mt-2">
                                    Link not generated by Supabase.
                                </p>
                            )}
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
}
